@using System.Text

@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Drivers.OSDP.Shared
@using Aporta.Drivers.OSDP.Shared.Actions

@inject HttpClient _http

@if (_configuration == null)
    {
        <div class="spinner"></div>
    }
    else
    {

        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                @if (_unusedPorts.Any())
                {
                    <Button Color="Color.Primary" Clicked="_addPortModal.Show">Add RS-485 Port</Button>
                }
                else
                {
                    <Alert Color="Color.Info">
                        <AlertMessage>Add RS-485 Port</AlertMessage>
                        <AlertDescription>None are available</AlertDescription>
                    </Alert>
                }
            </Column>
        </Row>
        @foreach (var bus in _configuration.Buses)
        {
        <Row>
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardTitle Margin="Margin.Is4.OnX">
                        <Row Margin="Margin.Is2.OnY">
                            <Column ColumnSize="ColumnSize.IsHalf">
                                <Heading Size="HeadingSize.Is5">
                                    Port @bus.PortName Devices
                                </Heading>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsHalf">
                                <Button Style="float: right" Color="Color.Danger" Clicked="@(async () => await RemoveBus(bus.PortName))">
                                    Remove
                                </Button>
                            </Column>
                        </Row>
                        <Row>
                            <Column>
                                <Button Color="Color.Primary" Clicked="@(() => ShowAddDeviceDialog(bus.PortName))">
                                    Add Device
                                </Button>
                            </Column>
                        </Row>
                    </CardTitle>
                    <CardBody>
                        <Table Striped="true" Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Name</TableHeaderCell>
                                    <TableHeaderCell>Address</TableHeaderCell>
                                    <TableHeaderCell>Connected</TableHeaderCell>
                                    <TableHeaderCell></TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var device in bus.Devices.OrderBy(device => device.Address))
                                {
                                    <TableRow>
                                        <TableRowHeader>
                                            @device.Name
                                        </TableRowHeader>
                                        <TableRowCell>
                                            @device.Address
                                        </TableRowCell>
                                        <TableRowCell>
                                            @if (device.IsConnected)
                                            {
                                                <Icon Name="IconName.ArrowUp" Style="color: green" Margin="Margin.Is3.OnX"/>
                                            } 
                                            else
                                            {
                                                <Icon Name="IconName.ArrowDown" Style="color: red" Margin="Margin.Is3.OnX"/>
                                            }
                                        </TableRowCell>
                                        <TableRowCell TextAlignment="TextAlignment.End">
                                            <Button Size="Size.Small"
                                                    Clicked="@(async () => await RemoveDevice(bus.PortName, device.Address))">
                                                <Icon Name="IconName.Delete" Style="color: red"/>
                                            </Button>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    </CardBody>
                </Card>
            </Column>
        </Row>
        }

        <Modal @ref="_addPortModal">
            <ModalBackdrop />
            <ModalContent Size="ModalSize.Default" Centered="true">
                <ModalHeader>
                    <ModalTitle>
                        Add RS-485 Port
                    </ModalTitle>
                    <CloseButton Clicked="@_addPortModal.Hide"/>
                </ModalHeader>
                <ModalBody>
                    <Field>
                        <FieldLabel>Port</FieldLabel>
                        <FieldBody>
                            <Select TValue="string" @bind-SelectedValue="_addBus.PortName">
                                @foreach (var portName in _unusedPorts)
                                {
                                    <SelectItem Value=@portName>@portName</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Baud Rate</FieldLabel>
                        <FieldBody>
                            <Select TValue="int" @bind-SelectedValue="_addBus.BaudRate">
                                @foreach (var baudRate in _baudRates)
                                {
                                    <SelectItem Value=@baudRate>@baudRate</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@_addPortModal.Hide">Cancel</Button>
                    <Button Color="Color.Primary" Clicked="@(async () => await AddBus())">Add</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

        <Modal @ref="_addDeviceModal">
            <ModalBackdrop/>
            <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                        <ModalTitle>
                            Add Device to @_currentBus?.PortName
                        </ModalTitle>
                        <CloseButton Clicked="@_addDeviceModal.Hide"/>
                    </ModalHeader>
                    <ModalBody>
                        <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addDeviceValidations">
                            <Validation Validator="@ValidationRule.IsNotEmpty" >
                                <Field>
                                    <FieldLabel>Name</FieldLabel>
                                    <FieldBody>
                                        <TextEdit @bind-Text="_addDevice.Name">
                                            <Feedback>
                                                <ValidationError>
                                                    Please enter a name for the device
                                                </ValidationError>
                                            </Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidateDeviceAddress">
                                <Field>
                                    <FieldLabel>Address</FieldLabel>
                                    <FieldBody>
                                        <NumericEdit @bind-Value="_addDevice.Address" TValue="byte" Decimals="0">
                                            <ValidationError>
                                                Address already used by a device
                                            </ValidationError>
                                        </NumericEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Field>
                                <FieldBody>
                                    <Check @bind-Checked="@_addDevice.RequireSecurity" TValue="bool">Require Security</Check>
                                </FieldBody>
                            </Field>
                        </Validations>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Secondary" Clicked="@_addDeviceModal.Hide">Cancel</Button>
                        <Button Color="Color.Primary" Clicked="@(async () => await AddDevice())">Add</Button>
                    </ModalFooter>
 
            </ModalContent>
        </Modal>
    }

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private Bus _addBus;
    private Bus _currentBus;
    private Device _addDevice;
    private string[] _unusedPorts;
    
    private Modal _addPortModal;
    private Modal _addDeviceModal;
    private Validations _addDeviceValidations;
    
    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    private readonly IEnumerable<int> _baudRates = new[]
    {
        9600,
        19200,
        38400,
        115200
    };

    private Aporta.Drivers.OSDP.Shared.Configuration _configuration;
    
    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public EventCallback<Guid> ExtensionIdChanged { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    [Parameter]
    public EventCallback<string> RawConfigurationChanged { get; set; }

    protected override void OnParametersSet()
    {
        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.OSDP.Shared.Configuration>(RawConfiguration);

        _addDevice = new Device {Name = string.Empty, Address = 0, RequireSecurity = true};

        InitializeNewBus();
    }

    private void InitializeNewBus()
    {
        _unusedPorts = _configuration.AvailablePorts.Except(_configuration.Buses.Select(bus => bus.PortName)).ToArray();

        _addBus = new Bus
        {
            Devices = new List<Device>(),
            BaudRate = 9600
        };

        if (_unusedPorts.Any())
        {
            _addBus.PortName = _unusedPorts.First();
        }
    }

    private async Task AddBus()
    {
        await _addPortModal.Hide();
        
        await PerformAction(ActionType.AddBus.ToString(),
            JsonConvert.SerializeObject(new BusAction
            {
                Bus = _addBus
            }));
    }

    private async Task RemoveBus(string busPortName)
    {
        var matchingBus = _configuration.Buses.First(bus => bus.PortName == busPortName);
        
        await PerformAction(ActionType.RemoveBus.ToString(),
            JsonConvert.SerializeObject(new BusAction
            {
                Bus = matchingBus
            }));
    }

    private void ShowAddDeviceDialog(string portName)
    {
        _currentBus = _configuration.Buses.First(bus => bus.PortName == portName);
        _addDevice = new Device{Name = string.Empty, Address = 0, RequireSecurity = true};
        
        _addDeviceModal.Show();
    }

    private async Task AddDevice()
    {
        if (!await _addDeviceValidations.ValidateAll())
        {
            return;
        }
        
        await _addDeviceModal.Hide();

        await PerformAction(ActionType.AddUpdateDevice.ToString(),
            JsonConvert.SerializeObject(new DeviceAction
            {
                PortName = _currentBus.PortName,
                Device = _addDevice
            }));
    }

    private async Task RemoveDevice(string portName, byte address)
    {
        _currentBus = _configuration.Buses.First(bus => bus.PortName == portName);

        var removingDevice = _currentBus.Devices.First(device => device.Address == address);

        await PerformAction(ActionType.RemoveDevice.ToString(),
            JsonConvert.SerializeObject(new DeviceAction
            {
                PortName = _currentBus.PortName,
                Device = removingDevice
            }));
    }
    
    private async Task PerformAction(string actionType, string parameters)
    {
        string url = string.Format(Paths.ExtensionPerformAction, ExtensionId, actionType);
        var response = await _http.PostAsync(url,
            new StringContent(parameters, Encoding.UTF8, "application/json"));
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = $"Unable to perform action {actionType}";
            _snackbarColor = SnackbarColor.Danger;
            await _snackbar.Show();
        }
    }

    private void ValidateDeviceAddress(ValidatorEventArgs eventArgs)
    {
        byte address = Convert.ToByte(eventArgs.Value);
        eventArgs.Status = _currentBus.Devices.All(device => device.Address != address) ? ValidationStatus.Success : ValidationStatus.Error;
    }

}