@using Blazorise.Snackbar
@using Newtonsoft.Json
@using System.Net.Http.Json
@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Shared.Messaging
@using Aporta.Drivers.Virtual.Shared
@using Aporta.Drivers.Virtual.Shared.Actions
@using Microsoft.AspNetCore.SignalR.Client
@using Aporta.Extensions.Endpoint;

@inject IDriverConfigurationCalls ConfigurationCalls;
@inject HttpClient Http;

@if (_configuration == null)
{
    <div class="spinner">Config Not Set</div>
}
else
{

    <Row>
        <Button Color="Color.Primary" Clicked="ShowAddReaderModal">Add Virtual Reader</Button>
    </Row>

    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Reader Name</TableHeaderCell>
                <TableHeaderCell>Reader Number</TableHeaderCell>
                <TableHeaderCell>Badge Number</TableHeaderCell>
                <TableHeaderCell></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var reader in _configuration.Readers)
            {
                <TableRow ElementId="@("Reader:" + @reader.Name)">
                    <TableRowHeader>
                        @reader.Name
                    </TableRowHeader>
                    <TableRowCell>
                        @reader.Number
                    </TableRowCell>
                    <TableRowCell>
                        <TextEdit Width="Width.Px(300)" @bind-Text="BadgeNumbers[reader.Number]"></TextEdit>
                    </TableRowCell>
                    <TableRowCell TextAlignment="TextAlignment.End">
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                Action
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (IsReaderAvailableForDelete(reader))
                                {
                                    <DropdownItem Clicked="@(async () => await RemoveReader(reader))">Delete</DropdownItem>
                                    <DropdownDivider />
                                }

                                <DropdownItem Clicked="@(async () => await SwipeBadge(reader.Number))">Click to Simulate Badge Swipe</DropdownItem>
                                
                            </DropdownMenu>
                        </Dropdown>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>

    <Modal @ref="_addVirtualReaderModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Virtual Reader
                </ModalTitle>
                <CloseButton Clicked="@_addVirtualReaderModal.Hide" />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addReaderValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addReader.Name">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the virtual reader
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addVirtualReaderModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddReader())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Snackbar @ref="_snackbar" Color="@_snackbarColor">
        <SnackbarBody>
            @_snackbarMessage
        </SnackbarBody>
    </Snackbar>

    <MessageProvider />
}

@code {
    [Inject]
    IMessageService MessageService { get; set; }

    private HubConnection _hubConnection;

    private Aporta.Drivers.Virtual.Shared.Configuration _configuration;

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private Modal _addVirtualReaderModal;
    private Aporta.Shared.Models.VirtualReader _addReader;
    private Validations _addReaderValidations;

    private Endpoint[] _availableAccessPoints;
    //public IEnumerable<IEndpoint> _availableAccessPoints;

    [Parameter]
    public Dictionary<byte, string> BadgeNumbers { get; set; }

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    protected async override void OnParametersSet()
    {
        _availableAccessPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Doors}/available");

        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);

        BadgeNumbers = new Dictionary<byte, string>();
        LoadBadgeNumberBindings();

    }
    //availableAccessPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Doors}/available");

    protected override async Task OnInitializedAsync()
    {

        await InitializedAvailableEndpoints();

        // _hubConnection = new HubConnectionBuilder()
        //     .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
        //     .WithAutomaticReconnect(new SignalRRetryPolicy())
        //     .Build();
        // _hubConnection.On<int>(Methods.DoorInserted, async doorId =>
        // {

        //     await InitializedAvailableEndpoints();

        //     StateHasChanged();
        // });
        // _hubConnection.On<int>(Methods.DoorDeleted, async doorId =>
        // {

        //     await InitializedAvailableEndpoints();

        //     StateHasChanged();
        // });
        // _hubConnection.On<int>(Methods.ExtensionDataChanged, async _ =>
        // {


        //     await InitializedAvailableEndpoints();

        //     StateHasChanged();
        // });
        // await _hubConnection.StartAsync();
    }

    private async Task InitializedAvailableEndpoints()
    {
        _availableAccessPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Doors}/available");


        var extension = await Http.GetFromJsonAsync<Extension>($"{Paths.Extensions}/{ExtensionId}");

        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(extension.Configuration);

        BadgeNumbers = new Dictionary<byte, string>();
        LoadBadgeNumberBindings();

        StateHasChanged();

    }

    private void LoadBadgeNumberBindings()
    {
        foreach (var device in _configuration.Readers)
        {
            BadgeNumbers.Add(device.Number, string.Empty);
        }
    }

    private async Task SwipeBadge(byte readerNumber)
    {
        var parameters = JsonConvert.SerializeObject(new BadgeSwipeAction
            {
                ReaderNumber = readerNumber,
                CardData = BadgeNumbers[readerNumber]
            });

        await PerformAction(ActionType.BadgeSwipe, parameters);
    }

    private async Task<bool> PerformAction(ActionType actionType, string parameters)
    {
        string responseData;
        try
        {
            responseData = await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return false;
        }

        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return true;
    }


    private async Task ShowAddReaderModal()
    {
        _addReader = new Aporta.Shared.Models.VirtualReader();
        _addVirtualReaderModal.Show();
    }

    private async Task RemoveReader(Reader readerToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete reader '{readerToRemove.Name}'?", "Delete reader", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }



        //var updatedConfiguration = JsonConvert.SerializeObject(_configuration);
        var readerToRemoveSerialized = JsonConvert.SerializeObject(readerToRemove);


        if (await PerformAction(ActionType.RemoveReader, readerToRemoveSerialized))
        {

            await InitializedAvailableEndpoints();
 
        }
    }

    private async Task AddReader()
    {

        if (!await _addReaderValidations.ValidateAll())
        {
            return;
        }
        await _addVirtualReaderModal.Hide();

        var newReader = new Reader
            {
                Name = _addReader.Name,
                Number = (byte)GetNextReaderNumber()
            };



        //var updatedConfiguration = JsonConvert.SerializeObject(_configuration);

        var readerToAddSerialized = JsonConvert.SerializeObject(newReader);

        if (await PerformAction(ActionType.AddReader, readerToAddSerialized))
        {
            await InitializedAvailableEndpoints(); 
        }

    }


    private int GetNextReaderNumber()
    {
        var nextReaderNumber = _configuration.Readers.MaxBy(reader => reader.Number);
        return nextReaderNumber.Number + 1;
    }

    private bool IsReaderAvailableForDelete(Reader reader)
    {

        return _availableAccessPoints.Count(endpoint => endpoint.DriverEndpointId == $"VR{reader.Number}") > 0;
    }

}
