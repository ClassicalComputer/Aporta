@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Shared.Messaging
@using Aporta.Drivers.Virtual.Shared
@using Aporta.Drivers.Virtual.Shared.Actions
@using Aporta.Extensions.Endpoint;

@inject IDriverConfigurationCalls ConfigurationCalls;
@inject IDoorCalls doorCalls;

@if (_configuration == null)
{
    <div class="spinner"></div>
}
else
{

    <Row>
        <Button Color="Color.Primary" Clicked="ShowAddReaderModal">Add Virtual Reader</Button>
    </Row>

    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Reader Name</TableHeaderCell>
                <TableHeaderCell>Reader Number</TableHeaderCell>
                <TableHeaderCell></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var reader in _configuration.Readers)
            {
                <TableRow ElementId="@("Reader:" + @reader.Name)">
                    <TableRowHeader>
                        @reader.Name
                    </TableRowHeader>
                    <TableRowCell>
                        @reader.Number
                    </TableRowCell>
                    <TableRowCell TextAlignment="TextAlignment.End">
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                Action
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (IsReaderAvailableForDelete(reader))
                                {
                                    <DropdownItem Clicked="@(async () => await RemoveReader(reader))">Delete</DropdownItem>
                                    <DropdownDivider />
                                }

                                <DropdownItem Clicked="@(async () => await ShowSwipeBadgeModal(reader.Number))">Swipe Badge</DropdownItem>
                                
                            </DropdownMenu>
                        </Dropdown>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>

    <Modal @ref="_addVirtualReaderModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Virtual Reader
                </ModalTitle>
                <CloseButton Clicked="@_addVirtualReaderModal.Hide" />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addReaderValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addReader.Name" id="AddReaderTextEdit">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the virtual reader
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addVirtualReaderModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddReader())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="_badgeSwipeModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Simulation of a Badge Swipe
                </ModalTitle>
                <CloseButton Clicked="@_badgeSwipeModal.Hide" />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_badgeSwipeValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Enter Badge Number</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_badgeSwipeAction.CardData">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter the badge number on the card
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_badgeSwipeModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await SwipeBadge())">Swipe the badge</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>


    <Snackbar @ref="_snackbar" Color="@_snackbarColor">
        <SnackbarBody>
            @_snackbarMessage
        </SnackbarBody>
    </Snackbar>

    <MessageProvider />
}

@code {


    [Inject]
    IMessageService MessageService { get; set; }
    private Aporta.Drivers.Virtual.Shared.Configuration _configuration;

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private Modal _badgeSwipeModal;
    private Validations _badgeSwipeValidations;
    private BadgeSwipeAction _badgeSwipeAction;

    private Modal _addVirtualReaderModal;
    private Validations _addReaderValidations;
    private VirtualReader _addReader;

    private Endpoint[] _availableAccessPoints;
    //public IEnumerable<IEndpoint> _availableAccessPoints;

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }


    protected override void OnParametersSet()
    {

        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);


    }

    protected override async Task OnInitializedAsync()
    {
        _addReader = new VirtualReader();
        _badgeSwipeAction = new BadgeSwipeAction();

        await InitializedAvailableEndpoints();

    }

    private async Task InitializedAvailableEndpoints()
    {
        _availableAccessPoints = await doorCalls.GetAvailableEndpoints();

        StateHasChanged();

    }

    private async Task<bool> PerformAction(ActionType actionType, string parameters)
    {
        string responseData;
        try
        {
            responseData = await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return false;
        }

        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return true;
    }

    private async Task ShowSwipeBadgeModal(byte readerNumber)
    {
        _badgeSwipeAction = new BadgeSwipeAction() { ReaderNumber = readerNumber };
        await _badgeSwipeModal.Show();
    }

    private async Task SwipeBadge()
    {

        if (!await _badgeSwipeValidations.ValidateAll())
        {
            return;
        }
        await _badgeSwipeModal.Hide();

        var parameters = JsonConvert.SerializeObject(new BadgeSwipeAction
            {
                ReaderNumber = _badgeSwipeAction.ReaderNumber,
                CardData = _badgeSwipeAction.CardData
            });

        await PerformAction(ActionType.BadgeSwipe, parameters);
    }

    private async Task ShowAddReaderModal()
    {
        _addReader = new Aporta.Shared.Models.VirtualReader();
        await _addVirtualReaderModal.Show();
    }

    private async Task RemoveReader(Reader readerToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete reader '{readerToRemove.Name}'?", "Delete reader", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        //var updatedConfiguration = JsonConvert.SerializeObject(_configuration);
        var readerToRemoveSerialized = JsonConvert.SerializeObject(readerToRemove);

        if (await PerformAction(ActionType.RemoveReader, readerToRemoveSerialized))
        {
            await InitializedAvailableEndpoints(); 
        }
    }

    private async Task AddReader()
    {

        if (!await _addReaderValidations.ValidateAll())
        {
            return;
        }
        await _addVirtualReaderModal.Hide();

        var newReader = new Reader
            {
                Name = _addReader.Name,
                Number = 0
            };

        var readerToAddSerialized = JsonConvert.SerializeObject(newReader);

        if (await PerformAction(ActionType.AddReader, readerToAddSerialized))
        {
            await InitializedAvailableEndpoints(); 
        }

    }

    private bool IsReaderAvailableForDelete(Reader reader)
    {
        return  _availableAccessPoints.Count(endpoint => endpoint.DriverEndpointId == $"VR{reader.Number}") > 0;
    }

}
