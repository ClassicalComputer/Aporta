@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Drivers.Virtual.Shared
@using Aporta.Drivers.Virtual.Shared.Actions
@using Aporta.Drivers.Virtual.WebClient.Dialogs

@inject IDriverConfigurationCalls ConfigurationCalls;
@inject IDoorCalls DoorCalls;

@if (_configuration == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Reader Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddReaderModal">Add Virtual Reader</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Reader Name</TableHeaderCell>
                                <TableHeaderCell>Reader Number</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var reader in _configuration.Readers)
                            {
                                <TableRow ElementId="@("Reader:" + @reader.Name)">
                                    <TableRowHeader>
                                        @reader.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @reader.Number
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                <DropdownItem Clicked="@(async () => await ShowEditReaderModal(reader))">Edit</DropdownItem>
                                                <DropdownItem Clicked="@(async () => await RemoveReader(reader))" Disabled="@(!IsReaderAvailableForDelete(reader))">Delete</DropdownItem>
                                                <DropdownDivider/>
                                                <DropdownItem Clicked="@(async () => await ShowSwipeBadgeModal(reader.Number))">Swipe Badge</DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Input Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddInputDialog">Add Virtual Input</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Input Name</TableHeaderCell>
                                <TableHeaderCell>Input Number</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var input in _configuration.Inputs)
                            {
                                <TableRow ElementId="@("Input:" + @input.Name)">
                                    <TableRowHeader>
                                        @input.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @input.Number
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @if (IsInputAvailableForDelete(input))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveInput(input))">Delete</DropdownItem>
                                                    <DropdownDivider />
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Output Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddOutputDialog">Add Virtual Output</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Output Name</TableHeaderCell>
                                <TableHeaderCell>Output Number</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var output in _configuration.Outputs)
                            {
                                <TableRow ElementId="@("Input:" + @output.Name)">
                                    <TableRowHeader>
                                        @output.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @output.Number
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @if (IsOutputAvailableForDelete(output))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveOutput(output))">Delete</DropdownItem>
                                                    <DropdownDivider />
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <AddEditDeviceDialog @ref="_addEditDeviceDialog" PerformAction="@AddEditDevice" />

    <AddInputDialog @ref="_addInputDialog" AddInputParam="@_addInputParam" PerformAddInputAction="@AddInput" />

    <AddOutputDialog @ref="_addOutputDialog" AddOutputParam="@_addOutputParam" PerformAddOutputAction="@AddOutput" />

    <BadgeSwipeDialog @ref="_badgeSwipeDialog" PerformSwipeBadgeAction="@BadgeSwipe" />

    <Snackbar @ref="_snackbar" Color="@_snackbarColor">
        <SnackbarBody>
            @_snackbarMessage
        </SnackbarBody>
    </Snackbar>

    <MessageProvider />
}

@code {
    [Inject]
    IMessageService MessageService { get; set; }

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private AddEditDeviceDialog _addEditDeviceDialog;
    
    private AddInputDialog _addInputDialog;
    private AddInputParameter _addInputParam;

    private AddOutputDialog _addOutputDialog;
    private AddOutputParameter _addOutputParam;
    
    private BadgeSwipeDialog _badgeSwipeDialog;

    private Endpoint[] _availableEndPoints;

    private Aporta.Drivers.Virtual.Shared.Configuration _configuration;

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    protected override void OnParametersSet()
    {
        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);
        _addInputParam = new AddInputParameter { Name = string.Empty };
        _addOutputParam = new AddOutputParameter { Name = string.Empty };
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAvailableEndpoints();
    }

    private async Task InitializeAvailableEndpoints()
    {
        _availableEndPoints = await DoorCalls.GetAvailableEndpoints();

        StateHasChanged();
    }

    private async Task<bool> PerformAction(ActionType actionType, string parameters)
    {
        try
        {
            await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return false;
        }

        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return true;
    }

    private async Task ShowSwipeBadgeModal(byte readerNumber)
    {
        _badgeSwipeDialog.ReaderNumberToSwipe = readerNumber;
        await _badgeSwipeDialog.ShowDialog();
    }

    private async Task ShowAddReaderModal()
    {
        _addEditDeviceDialog.IsAdding = true;
        _addEditDeviceDialog.Number = 0;
        _addEditDeviceDialog.Name = string.Empty;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Reader;
        
        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task ShowEditReaderModal(Reader reader)
    {
        _addEditDeviceDialog.IsAdding = false;
        _addEditDeviceDialog.Number = reader.Number;
        _addEditDeviceDialog.Name = reader.Name;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Reader;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task BadgeSwipe()
    {
        await PerformAction(ActionType.BadgeSwipe, JsonConvert.SerializeObject(new BadgeSwipeAction
        {
            ReaderNumber = _badgeSwipeDialog.ReaderNumberToSwipe,
            CardData = _badgeSwipeDialog.CardDataToSwipe
        }));
    }

    private async Task RemoveReader(Reader readerToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete reader '{readerToRemove.Name}'?", "Delete reader", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        var readerToRemoveSerialized = JsonConvert.SerializeObject(readerToRemove);

        if (await PerformAction(ActionType.RemoveReader, readerToRemoveSerialized))
        {
            await InitializeAvailableEndpoints(); 
        }
    }

    private async Task AddEditDevice()
    {
        if (_addEditDeviceDialog.Type == AddEditDeviceDialog.DeviceType.Reader)
        {
            if (await PerformAction(ActionType.AddUpdateReader, JsonConvert.SerializeObject(
                    new Reader(name: _addEditDeviceDialog.Name, number: _addEditDeviceDialog.Number))))
            {
                await InitializeAvailableEndpoints();
            }
        }
    }

    private bool IsReaderAvailableForDelete(Reader reader)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VR{reader.Number}") > 0;
    }

    private bool IsInputAvailableForDelete(Shared.Input input)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VI{input.Number}") > 0;
    }

    private bool IsOutputAvailableForDelete(Shared.Output output)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VO{output.Number}") > 0;
    }

    private async Task ShowAddInputDialog()
    {
        _addInputParam = new AddInputParameter();
        await _addInputDialog.ShowDialog();
    }

    private async Task AddInput()
    {
        if (await PerformAction(ActionType.AddInput, JsonConvert.SerializeObject(_addInputParam)))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private async Task RemoveInput(Shared.Input inputToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete input '{inputToRemove.Name}'?", "Delete input", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        var inputToRemoveSerialized = JsonConvert.SerializeObject(inputToRemove);

        if (await PerformAction(ActionType.RemoveInput, inputToRemoveSerialized))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private async Task ShowAddOutputDialog()
    {
        _addOutputParam = new AddOutputParameter();
        await _addOutputDialog.ShowDialog();
    }

    private async Task AddOutput()
    {
        if (await PerformAction(ActionType.AddOutput, JsonConvert.SerializeObject(_addOutputParam)))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private async Task RemoveOutput(Shared.Output outputToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete output '{outputToRemove.Name}'?", "Delete output", options =>
            {
                options.ShowMessageIcon = false;
                options.ConfirmButtonColor = Color.Danger;
            }))
        {
            return;
        }

        var outputToRemoveSerialized = JsonConvert.SerializeObject(outputToRemove);

        if (await PerformAction(ActionType.RemoveOutput, outputToRemoveSerialized))
        {
            await InitializeAvailableEndpoints();
        }
    }
}