@using System.Text.Json

@using OSDP.Drivers.Shared
<div>
    @if (_settings == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        if (_addBus != null)
        {
            <Form>
                <Field  ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldLabel>Port</FieldLabel>
                    <Select TValue="string" @bind-SelectedValue="_addBus.PortName">
                        @foreach (var portName in _unusedPorts)
                        {
                            <SelectItem Value=@portName>@portName</SelectItem>
                        }
                    </Select>
                </Field>
                <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldLabel>Baud Rate</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="_addBus.BaudRate">
                        @foreach (var baudRate in _baudRates)
                        {
                            <SelectItem Value=@baudRate>@baudRate</SelectItem>
                        }
                    </Select>
                </Field>
                <Button Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@AddBus">Add RS485 Bus</Button>
            </Form>
        }

        if (_settings.Buses.Any())
        {
            foreach (var bus in _settings.Buses)
            {
                <div>
                    <span>@bus.PortName</span>
                </div>
            }
        }
    }
</div>

@code {

    [Parameter]
    public string RawConfiguration { get; set; }
    
    [Parameter]
    public EventCallback<string> RawConfigurationChanged { get; set; }

    private Bus _addBus;
    private IEnumerable<string> _unusedPorts;
    private readonly IEnumerable<int> _baudRates = new []
    {
        9600,
        19200, 
        38400,
        115200
    };
    private Settings _settings;

    protected override void OnInitialized()
    {
        _settings = JsonSerializer.Deserialize<Settings>(RawConfiguration);
       
        InitializeNewBus();
    }
    
    private void InitializeNewBus()
    {
        _unusedPorts = _settings.AvailablePorts.Except(_settings.Buses.Select(bus => bus.PortName));
        
        var unusedPorts = _unusedPorts as string[] ?? _unusedPorts.ToArray();
        if (unusedPorts.Any())
        {
            _addBus = new Bus
            {
                devices = new Device[] {},
                PortName = unusedPorts.First(),
                BaudRate = 9600
            };
        }
        else
        {
            _addBus = null;
        }
    }
    
    private void AddBus()
    {
        _settings.Buses.Add(_addBus);

        InitializeNewBus();
    }
}