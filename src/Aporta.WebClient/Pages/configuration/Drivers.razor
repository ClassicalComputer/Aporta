@page "/configuration/drivers"

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Messaging
@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using System.Dynamic

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IDisposable

<Heading Size="HeadingSize.Is1">Drivers</Heading>

@if (_extensions == null)
{
    <div class="spinner"></div>
}
else
{
    <Table Striped="true" Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Enabled</TableHeaderCell>
                <TableHeaderCell>Loaded</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
        @foreach (var extension in _extensions.OrderBy(extension => extension.Name))
        {
            <TableRow>
                <TableRowHeader>
                    <a href="configuration/driver/@extension.Id">
                        @extension.Name
                    </a>
                </TableRowHeader>
                <TableRowCell>
                    <Check TValue="bool" Checked="@extension.Enabled" CheckedChanged="async checkedValue => { await ExtensionEnabledChanged(extension.Id, checkedValue); }"/>
                </TableRowCell>
                <TableRowCell>
                    @if (extension.Loaded)
                    {
                        <Icon Name="IconName.Check" Style="color: green"/>
                    }
                    else
                    {
                        <Icon Name="IconName.MinusCircle" Style="color: red"/>
                    }
                </TableRowCell>
            </TableRow>
        }
        </TableBody>
    </Table>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor"> 
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private Extension[] _extensions;
    private HubConnection _hubConnection;
    
#pragma warning disable 649
    private Snackbar _snackbar;
#pragma warning restore 649
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect(new SignalRRetryPolicy())
            .Build();
        _hubConnection.On<Guid>(Methods.ExtensionDataChanged, async _ =>
        {
            _extensions = await Http.GetFromJsonAsync<Extension[]>(Paths.Extensions);
            
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
        
        _extensions = await Http.GetFromJsonAsync<Extension[]>(Paths.Extensions);
    }
    
    async Task ExtensionEnabledChanged(Guid extensionId, bool checkedValue)
    {
        string url = $"{Paths.Extensions}/{extensionId}";
        url = QueryHelpers.AddQueryString(url, "enabled", checkedValue.ToString());
        var response = await Http.PostAsync(url, new StringContent(string.Empty));
        if (!response.IsSuccessStatusCode)
        {
            dynamic content = await response.Content.ReadFromJsonAsync<ExpandoObject>();
            _snackbarMessage = content.detail.ToString();
            _snackbarColor = SnackbarColor.Danger;
            await _snackbar.Show();
        }
    }
        
    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}