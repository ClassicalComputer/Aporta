@page "/configuration/outputs"

@inject HttpClient Http

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using System.Text
@using System.Text.Json

<Heading Size="HeadingSize.Is1">Outputs</Heading>

@if (_outputs == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            @if (_availableControlPoints.Any())
            {
                <Button Color="Color.Primary" Clicked="_addOutputModal.Show">Add Output</Button>
            }
            else
            {
                <Heading Size="HeadingSize.Is3">
                    No additional available outputs
                </Heading>
            }
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardTitle>
                    Outputs
                </CardTitle>
                <CardBody>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var output in _outputs.OrderBy(output => output.Name))
                            {
                                <TableRow>
                                    <TableRowHeader>
                                        @output.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        <Button Color="Color.Danger" Clicked="@(async () => await RemoveOutput(output.Id))">
                                            Remove
                                        </Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column> 
    </Row>
    
    <Modal @ref="_addOutputModal">
        <ModalBackdrop/>
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Output
                </ModalTitle>
                <CloseButton Clicked="@_addOutputModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addOutputValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty" >
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addOutput.Name">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the ouptut
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                 
                    <Field>
                        <FieldLabel>Device Endpoint</FieldLabel>
                        <FieldBody>
                            <Select TValue="int" @bind-SelectedValue="_addOutput.EndpointId">
                                @foreach (var controlPoint in _availableControlPoints)
                                {
                                    <SelectItem Value="@controlPoint.Id">@controlPoint.Name</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addOutputModal.Hide">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddOutput())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    private Output[] _outputs;
    private Endpoint[] _availableControlPoints;
    private Output _addOutput;
    
    private Modal _addOutputModal;
    private Validations _addOutputValidations;
    
    protected override async Task OnInitializedAsync()
    {
        _outputs = await Http.GetFromJsonAsync<Output[]>(Paths.Outputs);

        await InitializedAvailableOutputs();
    }

    private async Task InitializedAvailableOutputs()
    {
        _availableControlPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Outputs}/available");

        _addOutput = new Output();
        if (_availableControlPoints.Any())
        {
            _addOutput.EndpointId = _availableControlPoints.First().Id;
        }
    }

    private async Task AddOutput()
    {
        if (!_addOutputValidations.ValidateAll())
        {
            return;
        }
        _addOutputModal.Hide();

        string url = string.Format(Paths.Outputs);
        var response = await Http.PutAsync(url,
            new StringContent(JsonSerializer.Serialize(_addOutput), Encoding.UTF8, "application/json"));
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"Unable to perform action. Response reason - {(int) response.StatusCode}:{response.ReasonPhrase}");
        }
    }

    private async Task RemoveOutput(int outputId)
    {
        string url = string.Format($"{Paths.Outputs}/{outputId}");
        var response = await Http.DeleteAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"Unable to perform action. Response reason - {(int) response.StatusCode}:{response.ReasonPhrase}");
        }
    }

}