@page "/configuration/outputs"

@using System.Text
@using System.Text.Json

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">Outputs</Heading>

@if (_outputs == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            @if (_availableControlPoints.Any())
            {
                <Button Color="Color.Primary" Clicked="_addOutputModal.Show">Add Output</Button>
            }
            else
            {
                <Alert Color="Color.Warning" Visible="true">
                    <AlertMessage>Add Output</AlertMessage>
                    <AlertDescription>None are available</AlertDescription>
                </Alert>
            }
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var output in _outputs.OrderBy(output => output.Name))
                            {
                                <TableRow>
                                    <TableRowHeader>
                                        @output.Name
                                    </TableRowHeader>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Button Clicked="@(async () => await RemoveOutput(output.Id, output.Name))">
                                            <Icon Name="IconName.Delete" Style="color: red"/>
                                        </Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column> 
    </Row>
    
    <Modal @ref="_addOutputModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Output
                </ModalTitle>
                <CloseButton Clicked="@_addOutputModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addOutputValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty" >
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addOutput.Name">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the ouptut
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                 
                    <Field>
                        <FieldLabel>Device Endpoint</FieldLabel>
                        <FieldBody>
                            <Select TValue="int" @bind-SelectedValue="_addOutput.EndpointId">
                                @foreach (var controlPoint in _availableControlPoints)
                                {
                                    <SelectItem Value="@controlPoint.Id">@controlPoint.Name</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addOutputModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddOutput())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

<MessageProvider />

@code {
    [Inject] 
    IMessageService MessageService { get; set; }
    
    private List<Output> _outputs;
    private Endpoint[] _availableControlPoints;
    private Output _addOutput;
    
    private HubConnection _hubConnection;
    
    private Modal _addOutputModal;
    private Validations _addOutputValidations;
    
    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _outputs = await Http.GetFromJsonAsync<List<Output>>(Paths.Outputs);

        await InitializedAvailableOutputs();
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect()
            .Build();
        _hubConnection.On<int>(Methods.OutputInserted, async outputId =>
        {
            _outputs.Add( await Http.GetFromJsonAsync<Output>($"{Paths.Outputs}/{outputId}"));
            
            await InitializedAvailableOutputs();
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.OutputDeleted, async outputId =>
        {
            var output = _outputs.FirstOrDefault(o => o.Id == outputId);
            if (output == null) return;
            
            _outputs.Remove(output);
            
            await InitializedAvailableOutputs();

            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }

    private async Task InitializedAvailableOutputs()
    {
        _availableControlPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Outputs}/available");

        _addOutput = new Output();
        if (_availableControlPoints != null && _availableControlPoints.Any())
        {
            _addOutput.EndpointId = _availableControlPoints.First().Id;
        }
    }

    private async Task AddOutput()
    {
        if (!await _addOutputValidations.ValidateAll())
        {
            return;
        }
        await _addOutputModal.Hide();

        string url = string.Format(Paths.Outputs);
        var response = await Http.PutAsync(url,
            new StringContent(JsonSerializer.Serialize(_addOutput), Encoding.UTF8, "application/json"));
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to add output";
            _snackbarColor = SnackbarColor.Danger;
            await _snackbar.Show();
         }
    }

    private async Task RemoveOutput(int outputId, string outputName)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete output '{outputName}'?", "Delete Bus", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }
        
        string url = string.Format($"{Paths.Outputs}/{outputId}");
        var response = await Http.DeleteAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to remove output";
            _snackbarColor = SnackbarColor.Danger;
            await _snackbar.Show();
        }
    }

}