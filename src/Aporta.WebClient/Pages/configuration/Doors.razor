@page "/configuration/doors"

@using System.Text
@using System.Text.Json

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">Doors</Heading>

@if (_doors == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            @if (_availableAccessPoints.Any())
            {
                <Button Color="Color.Primary" Clicked="_addDoorModal.Show">Add Door</Button>
            }
            else
            {
                <Alert Color="Color.Info">
                    <AlertMessage>Add Door</AlertMessage>
                    <AlertDescription>None are available</AlertDescription>
                </Alert>
            }
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    Doors
                </CardTitle>
                <CardBody>
                    <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var door in _doors.OrderBy(door => door.Name))
                            {
                                <TableRow>
                                    <TableRowHeader>
                                        @door.Name
                                    </TableRowHeader>
                                    <TableRowCell TextAlignment="TextAlignment.Right">
                                        <Button Color="Color.Danger" Clicked="@(async () => await RemoveDoor(door.Id))">
                                            Remove
                                        </Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column> 
    </Row>
    
    <Modal @ref="_addDoorModal">
        <ModalBackdrop/>
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Door
                </ModalTitle>
                <CloseButton Clicked="@_addDoorModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addDoorValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty" >
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addDoor.Name">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the door
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                 
                    <Field>
                        <FieldLabel>Access Reader In</FieldLabel>
                        <FieldBody>
                            <Select TValue="int?" @bind-SelectedValue="_addDoor.InAccessEndpointId">
                                <SelectItem Value="-1">None</SelectItem>
                                @foreach (var accessPoint in _availableAccessPoints)
                                {
                                    <SelectItem Value="@accessPoint.Id">@accessPoint.Name</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addDoorModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddDoor())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private List<Door> _doors;
    private Endpoint[] _availableAccessPoints;
    private Door _addDoor;
    
    private HubConnection _hubConnection;
    
#pragma warning disable 649
    private Modal _addDoorModal;
    private Validations _addDoorValidations;
    
    private Snackbar _snackbar;
#pragma warning restore 649
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _doors = await Http.GetFromJsonAsync<List<Door>>(Paths.Doors);

        await InitializedAvailableDoors();
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect()
            .Build();
        _hubConnection.On<int>(Methods.DoorInserted, async doorId =>
        {
            _doors.Add( await Http.GetFromJsonAsync<Door>($"{Paths.Doors}/{doorId}"));
            
            await InitializedAvailableDoors();
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.DoorDeleted, async doorId =>
        {
            var door = _doors.FirstOrDefault(o => o.Id == doorId);
            if (door == null) return;
            
            _doors.Remove(door);
            
            await InitializedAvailableDoors();

            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }

    private async Task InitializedAvailableDoors()
    {
        _availableAccessPoints = await Http.GetFromJsonAsync<Endpoint[]>($"{Paths.Doors}/available");

        _addDoor = new Door();
        if (_availableAccessPoints.Any())
        {
            _addDoor.InAccessEndpointId = _availableAccessPoints.First().Id;
        }
    }

    private async Task AddDoor()
    {
        if (!_addDoorValidations.ValidateAll())
        {
            return;
        }
        _addDoorModal.Hide();

        string url = string.Format(Paths.Doors);
        var response = await Http.PutAsync(url,
            new StringContent(JsonSerializer.Serialize(_addDoor), Encoding.UTF8, "application/json"));
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to add door";
            _snackbarColor = SnackbarColor.Danger;
            _snackbar.Show();
         }
    }

    private async Task RemoveDoor(int doorId)
    {
        string url = string.Format($"{Paths.Doors}/{doorId}");
        var response = await Http.DeleteAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to remove door";
            _snackbarColor = SnackbarColor.Danger;
            _snackbar.Show();
        }
    }

}