@page "/driverconfiguration/{ExtensionId:guid}"

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.Shared.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IDisposable

@if (_extension == null)
{
    <div class="spinner"></div>
}
else
{
    <Heading Size="HeadingSize.Is1">@_extension.Name Driver Configuration</Heading>
                                
    @if (_extension.Id == Guid.Parse("D3C5DE68-E019-48D6-AB58-76F4B15CD0D5"))
    {
        <OSDP.Drivers.WebClient.Configuration @bind-ExtensionId="_extension.Id" @bind-RawConfiguration="_extension.Configuration"/>
    }
    else
    {
        <Heading Size="HeadingSize.Is3">No configuration page for this driver</Heading>
    }
}

@code {
    private Extension _extension;
    private HubConnection _hubConnection;
    
    [Parameter]
    public Guid ExtensionId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        string url = $"{Paths.Extension}/{ExtensionId}";
        _extension = await Http.GetFromJsonAsync<Extension>(url);
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect()
            .Build();
        _hubConnection.On<Guid>(Methods.ExtensionDataChanged, async extensionId =>
        {
            _extension = await Http.GetFromJsonAsync<Extension>(url);
            
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }
    
    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}