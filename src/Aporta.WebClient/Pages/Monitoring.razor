@page "/monitoring"

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">Monitoring</Heading>

@if (_outputs == null)
{
    <div class="spinner"></div>
}
else
{
<Row>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Card Margin="Margin.Is4.OnY">
            <CardTitle Margin="Margin.Is4.OnX">
                Outputs
            </CardTitle>
            <CardBody>
                <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var output in _outputs.OrderBy(output => output.Name))
                        {
                            <TableRow>
                                <TableRowHeader>
                                    @output.Name
                                </TableRowHeader>
                                <TableRowCell>
                                    <Check TValue="bool?" Checked="@_outputStates[output.Id]" CheckedChanged="async (bool? checkedValue) => await SetOutputState(output.Id, checkedValue)" /> 
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </CardBody>
        </Card>
    </Column> 
</Row>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private List<Output> _outputs;
    private readonly Dictionary<int, bool?> _outputStates = new Dictionary<int, bool?>();
    
    private HubConnection _hubConnection;
    
    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _outputs = await Http.GetFromJsonAsync<List<Output>>(Paths.Outputs);
        foreach (var output in _outputs)
        {
            _outputStates[output.Id] = await GetOutputState(output.Id);
        }
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect()
            .Build();
        _hubConnection.On<int>(Methods.OutputInserted, async outputId =>
        {
            _outputs.Add( await Http.GetFromJsonAsync<Output>($"{Paths.Outputs}/{outputId}"));
            _outputStates[outputId] = await GetOutputState(outputId);
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.OutputDeleted, outputId =>
        {
            var output = _outputs.FirstOrDefault(o => o.Id == outputId);
            if (output == null) return;
            
            _outputs.Remove(output);
            _outputStates.Remove(output.Id);

            StateHasChanged();
        });
        _hubConnection.On<int, bool>(Methods.OutputStateChanged, (outputId, newState) =>
        {
            _outputStates[outputId] = newState;
            
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }
    
    private async Task<bool?> GetOutputState(int outputId)
    {
        string url = $"{Paths.Outputs}/set/{outputId}";
        var response = await Http.GetAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        return bool.Parse(await response.Content.ReadAsStringAsync());
    }
    
    private async Task SetOutputState(int outputId, bool? checkedValue)
    {
        string url = $"{Paths.Outputs}/set/{outputId}";
        url = QueryHelpers.AddQueryString(url, "state", checkedValue.ToString());
        var response = await Http.PostAsync(url, new StringContent(string.Empty));
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to set output";
            _snackbarColor = SnackbarColor.Danger;
            _snackbar.Show();
        }
    }
}