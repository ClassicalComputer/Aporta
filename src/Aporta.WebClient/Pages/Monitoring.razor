@page "/monitoring"

@using Aporta.Shared.Models
@using Aporta.Shared.Calls

@inject HttpClient Http

<Heading Size="HeadingSize.Is1">Monitoring</Heading>

@if (_outputs == null)
{
    <div class="spinner"></div>
}
else
{
<Row>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Card Margin="Margin.Is4.OnY">
            <CardTitle Margin="Margin.Is4.OnX">
                Outputs
            </CardTitle>
            <CardBody>
                <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var output in _outputs.OrderBy(output => output.Name))
                        {
                            <TableRow>
                                <TableRowHeader>
                                    @output.Name
                                </TableRowHeader>
                                <TableRowCell>
                                    <Check TValue="bool" CheckedChanged="async (bool checkedValue) => await SetControlPoint(output.Id, checkedValue)" /> 
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </CardBody>
        </Card>
    </Column> 
</Row>
}



@code {
    private Output[] _outputs;
    
    protected override async Task OnInitializedAsync()
    {
        _outputs = await Http.GetFromJsonAsync<Output[]>(Paths.Outputs);
    }
    
    async Task SetControlPoint(int outputId, bool checkedValue)
    {
        string url = $"{Paths.Outputs}/set/{outputId}";
        url = QueryHelpers.AddQueryString(url, "state", checkedValue.ToString());
        var response = await Http.PostAsync(url, new StringContent(string.Empty));
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"Unable to update extension. Response reason - {(int) response.StatusCode}:{response.ReasonPhrase}");
        }
    }
}